{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/helpers/format.js","src/lib/history.js","src/lib/module.js","src/outlog.js"],"names":[],"mappings":"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","file":"build.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","export const getTimeStamp = (date)=> {\n    return ((now.getMonth() + 1) + '/' +\n    (now.getDate()) + '/' +\n    now.getFullYear() + \" \" +\n    now.getHours() + ':' +\n    ((now.getMinutes() < 10)\n        ? (\"0\" + now.getMinutes())\n        : (now.getMinutes())) + ':' +\n    ((now.getSeconds() < 10)\n        ? (\"0\" + now.getSeconds())\n        : (now.getSeconds())));\n};\n\nconst symbols = {\n    success: '✔︎ ',\n    error: '✘ ',\n    warn: '⚑ ',\n    arrow: '➤ '\n};\n\nexport const rawRender = (log)=> {\n    console.log(log);\n};\n\nconst isBrowser = ()=> {\n    return !!global.Navigator;\n};\n\nconst renderInBrowser = (log)=> {\n    if (log.type == \"info\") {\n        console.log('%c [' + log.moduleName + \"] \" + '%c ' + log.message +\n            ' ', 'background: #24292e; color: #FFF', ' color: #fff; background: #8a939a');\n\n        if (log.details) {\n            // console.log('%c Details: ', 'background: #e5e5e5; color: #666');\n            let detailsString = '%c';\n\n            Object.keys(log.details).forEach((key)=> {\n                detailsString += symbols.arrow + key + \": \" + log.details[key] + \" \\n\";\n            });\n\n            console.log(detailsString + '\\n\\n', ' color: #8a939a');\n        }\n    }\n\n    if (log.type == \"error\") {\n        console.log('%c [' + log.moduleName + \"] \" + ' %c ' + symbols.error + log.message + ' ',\n            'background: #24292e; color: #FFF', 'background: #b90000; color: #fff');\n\n\n        if (log.details) {\n            let detailsString = '%c';\n            Object.keys(log.details).forEach((key)=> {\n                detailsString += symbols.arrow + key + \": \" + log.details[key] + \" \\n\";\n            });\n            console.log(detailsString + '\\n\\n', ' color: #b90000');\n        }\n    }\n\n    if (log.type == \"warning\") {\n        console.log('%c [' + log.moduleName + \"] \" + ' %c ' + symbols.warn + log.message + ' ',\n            'background: #24292e; color: #FFF', 'background: #bf7121; color: #fff;');\n\n\n        if (log.details) {\n            let detailsString = '%c';\n            Object.keys(log.details).forEach((key)=> {\n                detailsString += symbols.arrow + key + \": \" + log.details[key] + \" \\n\";\n            });\n            console.log(detailsString + '\\n\\n', ' color: #bf7121');\n        }\n    }\n\n    if (log.type == \"success\") {\n        console.log('%c [' + log.moduleName + \"] \" + ' %c ' + symbols.success + log.message + ' ',\n            'background: #24292e; color: #FFF', 'background: #1a9635; color: #fff;');\n\n\n        if (log.details) {\n            let detailsString = '%c';\n            Object.keys(log.details).forEach((key)=> {\n                detailsString += symbols.arrow + key + \": \" + log.details[key] + \" \\n\";\n            });\n            console.log(detailsString + '\\n\\n', ' color: #1a9635');\n        }\n    }\n};\n\nconst renderInConsole = (log)=> {\n    console.log(log.type.toUpperCase() + \":\" + \"[ \" + log.moduleName + \" ] \" + log.message);\n};\n\nexport const render = (log)=> {\n    if (isBrowser()) {\n        renderInBrowser(log);\n    } else {\n        renderInConsole(log);\n    }\n};\nexport const renderWithTime = (log)=> {\n};","import {getTimeStamp} from '../helpers/format'\n\n\nconst checkLogDetails = (data)=> {\n    if (!data) return true;\n    \n    Object.keys(data).forEach((key)=> {\n        if (data[key] instanceof Function) {\n            throw new Error(\"Outlog: You can't pass multidimensional data to logger or functions\");\n        }\n\n        if (data[key] instanceof Object) {\n\n            Object.keys(data[key]).forEach((k2)=> {\n                if (data[key][k2] instanceof Object) {\n                    throw new Error(\"Outlog: You can't pass multidimensional data to logger\");\n                }\n\n                if (data[key][k2] instanceof Array) {\n                    throw new Error(\"Outlog: You can't pass multidimensional data to logger\");\n                }\n            });\n\n\n        }\n    });\n};\n\nclass History {\n    constructor() {\n        this.localStorage = false;\n        this.showTimeStamps = false;\n        this.messages = [];\n    }\n\n    config(options) {\n        this.localStorage = options.useMemory;\n        this.showTimeStamps = options.showTime;\n\n    }\n\n    write(module, type, message, details) {\n        checkLogDetails(details);\n\n        this.messages.push({\n            moduleName: module,\n            type: type,\n            message: message,\n            details: details\n        });\n    }\n\n    getTrace() {\n        if (this.localStorage) {\n            console.log(\"read all from local storage\");\n            // return localstorage trace\n        } else {\n            return this.messages;\n        }\n    }\n}\n\nexport default new History();","import History from './history'\nimport {render} from '../helpers/format'\n\nexport default class Module {\n    constructor(name, opts) {\n        this.options = opts;\n        this.name = name;\n    }\n\n    info(message, details) {\n        History.write(this.name, \"info\", message, details);\n\n        if (this.options.debug) {\n            render({\n                moduleName: this.name,\n                message: message,\n                details: details,\n                type: \"info\"\n            });\n        }\n    }\n\n    warning(message, details) {\n        History.write(this.name, \"warning\", message, details);\n\n        if (this.options.debug) {\n            render({\n                moduleName: this.name,\n                message: message,\n                details: details,\n                type: \"warning\"\n            });\n        }\n    }\n\n    success(message, details) {\n        History.write(this.name, \"success\", message, details);\n\n        if (this.options.debug) {\n            render({\n                moduleName: this.name,\n                message: message,\n                details: details,\n                type: \"success\"\n            });\n        }\n    }\n\n    error(message, details) {\n        History.write(this.name, \"error\", message, details);\n\n        if (this.options.debug) {\n            render({\n                moduleName: this.name,\n                message: message,\n                details: details,\n                type: \"error\"\n            });\n        }\n    }\n\n    trace(args) {\n        let allHistory = History.getTrace();\n\n        allHistory.forEach((log)=> {\n            render(log);\n        });\n    }\n}\n","/*\n * @author Alex Clever <axclever@gmail.com>\n *\n *  Outlog Library\n *\n * */\n\nimport ModuleFactory from './lib/module'\nimport History from './lib/history'\nimport {render} from './helpers/format'\n\n\nconst Modules = {};\n\n\nclass Outlog {\n    constructor() {\n        this.options = {\n            debug: false,\n            colors: true,\n            serverUrl: false,\n            memory: false\n        };\n\n        this.trace = {\n            all: (args)=> {\n                let allHistory = History.getTrace();\n\n                allHistory.forEach((message)=> {\n                    render(message);\n                });\n            }\n        };\n    }\n\n    config(args) {\n        // server\n        // history\n        // global debug mode\n        if (Object.keys(Modules).length > 0) {\n            throw new Error(\"Outlog Error: use .config() method before initializing modules\");\n        }\n\n\n        Object.assign({},{});\n\n        History.config(this.options);\n    }\n\n    init(moduleName, args) {\n        if (typeof moduleName != 'string') {\n            throw new Error(\"init method: wrong parameter 'moduleName'. Should be string\");\n        }\n\n        if ((!args instanceof Object)) {\n            throw new Error(\"init method: wrong parameter 'args'. Should be an object\");\n        }\n\n        let options = Object.assign(this.options, args);\n        let trimmedName = moduleName.trim().replace(/\\ /ig, \"_\");\n\n        if (!Modules[trimmedName]) {\n            let module = new ModuleFactory(trimmedName, options);\n            Modules[trimmedName] = module;\n            this.trace[trimmedName] = module.trace;\n            return module;\n        } else {\n            throw new Error(\"Outlog Error: module already exist, use another name\");\n        }\n    }\n}\n\nif (global.window) {\n    window.Outlog = new Outlog();\n}\n\nmodule.exports = new Outlog();\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}