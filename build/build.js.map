{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/helpers/format.js","src/helpers/request.js","src/lib/history.js","src/lib/module.js","src/outlog.js"],"names":[],"mappings":"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","file":"build.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","export const getTimeStamp = (date)=> {\n    return ((now.getMonth() + 1) + '/' +\n    (now.getDate()) + '/' +\n    now.getFullYear() + \" \" +\n    now.getHours() + ':' +\n    ((now.getMinutes() < 10)\n        ? (\"0\" + now.getMinutes())\n        : (now.getMinutes())) + ':' +\n    ((now.getSeconds() < 10)\n        ? (\"0\" + now.getSeconds())\n        : (now.getSeconds())));\n};\n\nconst symbols = {\n    success: '✔︎ ',\n    error: '✘ ',\n    warn: '⚑ ',\n    arrow: '➤ '\n};\n\nexport const rawRender = (log)=> {\n    console.log(log);\n};\n\nconst isBrowser = ()=> {\n    return !!global.Navigator;\n};\n\nconst renderInBrowser = (log)=> {\n    if (log.type == \"info\") {\n        console.log('%c [' + log.moduleName + \"] \" + '%c ' + log.message +\n            ' ', 'background: #24292e; color: #FFF', ' color: #fff; background: #8a939a');\n\n        if (log.details) {\n            // console.log('%c Details: ', 'background: #e5e5e5; color: #666');\n            let detailsString = '%c';\n\n            Object.keys(log.details).forEach((key)=> {\n                detailsString += symbols.arrow + key + \": \" + log.details[key] + \" \\n\";\n            });\n\n            console.log(detailsString + '\\n\\n', ' color: #8a939a');\n        }\n    }\n\n    if (log.type == \"error\") {\n        console.log('%c [' + log.moduleName + \"] \" + ' %c ' + symbols.error + log.message + ' ',\n            'background: #24292e; color: #FFF', 'background: #b90000; color: #fff');\n\n\n        if (log.details) {\n            let detailsString = '%c';\n            Object.keys(log.details).forEach((key)=> {\n                detailsString += symbols.arrow + key + \": \" + log.details[key] + \" \\n\";\n            });\n            console.log(detailsString + '\\n\\n', ' color: #b90000');\n        }\n    }\n\n    if (log.type == \"warning\") {\n        console.log('%c [' + log.moduleName + \"] \" + ' %c ' + symbols.warn + log.message + ' ',\n            'background: #24292e; color: #FFF', 'background: #bf7121; color: #fff;');\n\n\n        if (log.details) {\n            let detailsString = '%c';\n            Object.keys(log.details).forEach((key)=> {\n                detailsString += symbols.arrow + key + \": \" + log.details[key] + \" \\n\";\n            });\n            console.log(detailsString + '\\n\\n', ' color: #bf7121');\n        }\n    }\n\n    if (log.type == \"success\") {\n        console.log('%c [' + log.moduleName + \"] \" + ' %c ' + symbols.success + log.message + ' ',\n            'background: #24292e; color: #FFF', 'background: #1a9635; color: #fff;');\n\n\n        if (log.details) {\n            let detailsString = '%c';\n            Object.keys(log.details).forEach((key)=> {\n                detailsString += symbols.arrow + key + \": \" + log.details[key] + \" \\n\";\n            });\n            console.log(detailsString + '\\n\\n', ' color: #1a9635');\n        }\n    }\n};\n\nconst renderInConsole = (log)=> {\n    console.log(log.type.toUpperCase() + \":\" + \"[ \" + log.moduleName + \" ] \" + log.message);\n};\n\nexport const render = (log)=> {\n    if (isBrowser()) {\n        renderInBrowser(log);\n    } else {\n        renderInConsole(log);\n    }\n};\nexport const renderWithTime = (log)=> {\n};","export const send = (serverUrl, data) => {\n    var xhr = new XMLHttpRequest();\n    xhr.onreadystatechange = function () {\n        if (this.readyState != 4) return;\n\n        if (this.status != 200) {\n            console.log(\"OutLog: connection error\");\n        }\n    };\n\n    var jsonData = JSON.stringify({\n        moduleName: data.moduleName,\n        type: data.type,\n        message: data.message,\n        details: data.details,\n        meta: {\n            domain: document.location.origin,\n            url: document.location.href\n        }\n    });\n\n    xhr.open(\"POST\", serverUrl, true);\n    xhr.setRequestHeader(\"Content-Type\", \"application/json;charset=UTF-8\");\n    xhr.send(jsonData);\n};","import {getTimeStamp} from '../helpers/format'\nimport {send} from '../helpers/request'\n\n\nconst checkLogDetails = (data)=> {\n    if (!data) return true;\n\n    Object.keys(data).forEach((key)=> {\n        if (data[key] instanceof Function) {\n            throw new Error(\"Outlog: You can't pass multidimensional data to logger or functions\");\n        }\n\n        if (data[key] instanceof Object) {\n\n            Object.keys(data[key]).forEach((k2)=> {\n                if (data[key][k2] instanceof Object) {\n                    throw new Error(\"Outlog: You can't pass multidimensional data to logger\");\n                }\n\n                if (data[key][k2] instanceof Array) {\n                    throw new Error(\"Outlog: You can't pass multidimensional data to logger\");\n                }\n            });\n\n\n        }\n    });\n};\n\nclass History {\n    constructor() {\n        this.state = {\n            localStorage: false,\n            timeStamp: false,\n            serverUrl: false,\n            sync: true\n        };\n\n        this.messages = [];\n    }\n\n    config(options) {\n        this.state = Object.assign(this.state, options);\n    }\n\n    write(module, type, message, details, options) {\n        checkLogDetails(details);\n\n        let logData = {\n            moduleName: module,\n            type: type,\n            message: message,\n            details: details\n        };\n\n        if (options.publicKey) {\n            logData.publicKey = options.publicKey\n        }\n\n        this.messages.push(logData);\n\n        if (options.sync == false) {\n            return false;\n        }\n\n        const serverUrl = this.state.serverUrl;\n\n        if (serverUrl && this.state.sync) {\n            send(serverUrl, logData);\n        }\n    }\n\n    getTrace() {\n        if (this.state.localStorage) {\n            console.log(\"read all from local storage [ not implemented ]\");\n            // return localstorage trace\n        } else {\n            return this.messages;\n        }\n    }\n}\n\nexport default new History();","import History from './history'\nimport {render} from '../helpers/format'\n\nexport default class Module {\n    constructor(name, opts) {\n        this.options = opts;\n        this.name = name;\n    }\n\n    info(message, details) {\n        History.write(this.name, \"info\", message, details, this.options);\n\n        if (this.options.debug) {\n            render({\n                moduleName: this.name,\n                message: message,\n                details: details,\n                type: \"info\"\n            });\n        }\n    }\n\n    warning(message, details) {\n        History.write(this.name, \"warning\", message, details, this.options);\n\n        if (this.options.debug) {\n            render({\n                moduleName: this.name,\n                message: message,\n                details: details,\n                type: \"warning\"\n            });\n        }\n    }\n\n    success(message, details) {\n        History.write(this.name, \"success\", message, details, this.options);\n\n        if (this.options.debug) {\n            render({\n                moduleName: this.name,\n                message: message,\n                details: details,\n                type: \"success\"\n            });\n        }\n    }\n\n    error(message, details) {\n        History.write(this.name, \"error\", message, details, this.options);\n\n        if (this.options.debug) {\n            render({\n                moduleName: this.name,\n                message: message,\n                details: details,\n                type: \"error\"\n            });\n        }\n    }\n\n    trace(args) {\n        let allHistory = History.getTrace();\n\n        allHistory.forEach((log)=> {\n            render(log);\n        });\n    }\n}\n","/*\n * @author Alex Clever <axclever@gmail.com>\n *\n *  Outlog Library\n *\n * */\n\nimport ModuleFactory from './lib/module'\nimport History from './lib/history'\nimport {render} from './helpers/format'\n\nconst Modules = {};\n\nclass Outlog {\n    constructor() {\n        this.options = {\n            debug: false,\n            colors: true,\n            serverUrl: false,\n            sync: true,\n            memory: false,\n            publicKey: null\n        };\n\n        this.trace = {\n            all: (args)=> {\n                let allHistory = History.getTrace();\n\n                allHistory.forEach((message)=> {\n                    render(message);\n                });\n            }\n        };\n    }\n\n    config(args) {\n        this.options = Object.assign({}, this.options, args);\n        History.config(this.options);\n    }\n\n    init(moduleName, args) {\n        if (typeof moduleName != 'string') {\n            throw new Error(\"init method: wrong parameter 'moduleName'. Should be string\");\n        }\n\n        if ((!args instanceof Object)) {\n            throw new Error(\"init method: wrong parameter 'args'. Should be an object\");\n        }\n\n        let options = Object.assign({}, this.options, args);\n        let trimmedName = moduleName.trim().replace(/\\ /ig, \"_\");\n\n\n        if (!Modules[trimmedName]) {\n            let module = new ModuleFactory(trimmedName, options);\n            Modules[trimmedName] = module;\n            this.trace[trimmedName] = module.trace;\n            return module;\n\n        } else {\n            throw new Error(\"Outlog Error: module already exist, use another name\");\n        }\n    }\n}\n\nif (global.window) {\n    window.Outlog = new Outlog();\n}\n\nmodule.exports = new Outlog();\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}